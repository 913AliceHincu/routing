{"version":3,"sources":["Nav.js","About.js","Shop.js","ItemDetail.js","App.js","reportWebVitals.js","index.js"],"names":["Nav","navStyle","color","className","style","to","About","Shop","useEffect","fetchItems","useState","items","setItems","a","fetch","data","json","console","log","map","item","itemId","name","ItemDetail","match","setItem","params","id","fetchItem","myItem","src","images","background","alt","Home","App","path","exact","component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qNAuBeA,MApBf,WACE,IAAMC,EAAW,CACbC,MAAO,SAGX,OACE,gCACE,sCACE,qBAAIC,UAAU,YAAd,UACE,cAAC,IAAD,CAAMC,MAAOH,EAAUI,GAAG,SAA1B,SACE,yCAEF,cAAC,IAAD,CAAMD,MAAOH,EAAUI,GAAG,QAA1B,SACE,+CCNGC,MARf,WACE,OACE,8BACE,+C,gCC0BSC,MA3Bf,WAGIC,qBAAU,WACNC,MACD,IAEH,MAA0BC,mBAAS,IAAnC,mBAAOC,EAAP,KAAcC,EAAd,KAEMH,EAAU,uCAAG,8BAAAI,EAAA,sEACIC,MAAM,uDADV,cACTC,EADS,gBAEKA,EAAKC,OAFV,OAETL,EAFS,OAGfM,QAAQC,IAAIP,EAAMI,MAClBH,EAASD,EAAMI,MAJA,2CAAH,qDAOhB,OACI,8BACKJ,EAAMQ,KAAI,SAAAC,GAAI,OACX,6BACI,cAAC,IAAD,CAAMf,GAAE,eAAUe,EAAKC,QAAvB,SAAkCD,EAAKA,KAAKE,QADvCF,EAAKC,cCefE,MAnCf,YAAgC,IAAVC,EAAS,EAATA,MAClB,EAAwBd,mBAAS,MAAjC,mBAAOU,EAAP,KAAaK,EAAb,KAsBA,OAnBAjB,qBAAU,WAAO,IAAD,GAIT,OAACgB,QAAD,IAACA,GAAD,UAACA,EAAOE,cAAR,aAAC,EAAeC,KAGJ,uCAAG,8BAAAd,EAAA,sEAEUC,MAAM,sDAAD,OAAuDU,EAAME,OAAOC,KAFnF,cAERC,EAFQ,gBAGOA,EAAUZ,OAHjB,OAGRa,EAHQ,OAIdJ,EAAQI,EAAOd,KAAKK,MACpBH,QAAQC,IAAIW,EAAOd,KAAKK,MALV,2CAAH,oDAQfQ,KAED,CAACJ,EAAME,OAAOC,KAEbP,EAKA,gCACI,6BAAKA,EAAKE,OACV,qBAAKQ,IAAKV,EAAKW,OAAOC,WAAYC,IAAI,QANnC,4D,OCEf,IAAMC,EAAO,WACX,OACE,8BACE,8CAKSC,EA9Bf,WACE,OACE,cAAC,IAAD,UACE,sBAAKhC,UAAU,MAAf,UACE,cAAC,EAAD,IAOA,eAAC,IAAD,WACE,cAAC,IAAD,CAAOiC,KAAK,IAAIC,OAAK,EAACC,UAAWJ,IACjC,cAAC,IAAD,CAAOE,KAAK,SAASE,UAAWhC,IAChC,cAAC,IAAD,CAAO8B,KAAK,QAAQC,OAAK,EAACC,UAAW/B,IACrC,cAAC,IAAD,CAAO6B,KAAK,YAAYE,UAAWf,aCV9BgB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.c7ff1edb.chunk.js","sourcesContent":["import './App.css';\r\nimport { Link } from 'react-router-dom';\r\n\r\nfunction Nav() {\r\n  const navStyle = {\r\n      color: 'white'\r\n  }\r\n\r\n  return (\r\n    <nav>\r\n      <h3>Logo</h3>\r\n        <ul className=\"nav-links\">\r\n          <Link style={navStyle} to='/about'>\r\n            <li>About</li>\r\n          </Link>\r\n          <Link style={navStyle} to='/shop'>\r\n            <li>Shop</li>\r\n          </Link>\r\n        </ul>\r\n    </nav>\r\n  );\r\n}\r\n\r\nexport default Nav;\r\n","import './App.css';\r\n\r\nfunction About() {\r\n  return (\r\n    <div>\r\n      <h1>About page</h1>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default About;\r\n","import { useState, useEffect } from 'react';\r\nimport './App.css';\r\nimport {Link} from 'react-router-dom';\r\n\r\nfunction Shop() {\r\n\r\n    // it will run only when the component mounts because we have []\r\n    useEffect(() => {\r\n        fetchItems();\r\n    }, []);\r\n\r\n    const [items, setItems] = useState([]);\r\n\r\n    const fetchItems = async () => {\r\n        const data = await fetch('https://fortnite-api.theapinetwork.com/upcoming/get');\r\n        const items = await data.json();\r\n        console.log(items.data);\r\n        setItems(items.data);\r\n    }\r\n  \r\n    return (\r\n        <div>\r\n            {items.map(item => (\r\n                <h1 key={item.itemId}>\r\n                    <Link to={`shop/${item.itemId}`}>{item.item.name}</Link>\r\n                </h1>\r\n            ))}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Shop;\r\n","import { useState, useEffect } from 'react';\r\nimport './App.css';\r\n\r\nfunction ItemDetail({ match }) {\r\n    const [item, setItem] = useState(null);\r\n    // it will run only when the component mounts if we only have []\r\n    \r\n    useEffect(() => {\r\n        // in case match.params.id is null(or another falsy value) -> we don't make a request from api\r\n        // if match.params.id doesn't exist it return undefined\r\n        // ? :  is ternary operator, and ?. is optional chaining\r\n        if(!match?.params?.id){\r\n            return;\r\n        }\r\n        const fetchItem = async () => {\r\n            // match.params.id is a query param. After \"?\" are query params, they are splitted by \"&\"\r\n            const fetchItem = await fetch(`https://fortnite-api.theapinetwork.com/item/get?id=${match.params.id}`);\r\n            const myItem = await fetchItem.json();\r\n            setItem(myItem.data.item);\r\n            console.log(myItem.data.item);\r\n        }\r\n    \r\n        fetchItem();\r\n        //console.log(match);\r\n    }, [match.params.id]);\r\n\r\n    if(!item) {\r\n        return <div>waiting for fetching ...</div>\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h1>{item.name }</h1>\r\n            <img src={item.images.background} alt=\"\" />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ItemDetail;\r\n","import './App.css';\nimport Nav from './Nav';\nimport About from './About';\nimport Shop from './Shop';\nimport ItemDetail from './ItemDetail';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\n\nfunction App() {\n  return (\n    <Router> \n      <div className=\"App\">\n        <Nav />\n        {/*\n        We use switch -> if it matches the url, it will stop and\n        il will render only that component. We use \"exact\" because \n        if not it will not render anything else (since everything \n        starts with /)\n        */}\n        <Switch>\n          <Route path=\"/\" exact component={Home}/>\n          <Route path=\"/about\" component={About}/>\n          <Route path=\"/shop\" exact component={Shop}/>\n          <Route path=\"/shop/:id\" component={ItemDetail}/>\n        </Switch>\n      </div>\n    </Router>\n  );\n}\n\nconst Home = () => {\n  return (\n    <div>\n      <h1>Home Page</h1>\n    </div>\n  )\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}